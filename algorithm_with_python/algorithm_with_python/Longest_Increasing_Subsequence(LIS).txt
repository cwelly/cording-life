 최장증가 부분수열(LIS)란?
 한 수열에서 오름차순(혹은 내림차순)으로 정렬된 부분수열을 뽑아낼때, 
 그 수열의 부분수열 중 가장 길이가 긴 수열의 길이를 찾는 알고리즘이다.

#동적 데이터 배열
 dp=[1]*n  #n 은 원 수열의 길이
 #여기서 각 값들을 1로 설정하는 이유는, 각 원소로도 길이가 1인 부분수열을 만들수 있기 때문에,
 #최악의 경우에도 길이가 1인 lis를 만들기 때문
 
 for i in range(1, n):
    for j in range(0, i):
        # 오름차순으로 증가하는 경우
        if array[j] < array[i]:
            #i길이까지의 부분수열로 만들수있는  lis의 길이 값을 초기화하는 과정
            dp[i] = max(dp[i], dp[j] + 1)   #dp[j]+1 와 비교하는 이유는 그전에 계산한 값을 이용하기 때문

 
 다이나믹 프로그래밍의 대표 유형중 하나로 그 원리는 다음과 같다
 앞에서부터, 증가하는 경우를 차례차례 d[i]값을 초기화하여 동적데이터 배열에 저장하고,
 뒤에서 증가하는 경우를 찾았을땐, 앞의 동적데이터 배열의 값을 이용해 불필요한 계산을 줄인다.
 
 처음값을 제외한, 다음 값들의 자리(i)가 끝인 부분수열중, 오름차순인 것이 어떤것인지를 dp배열에 저장한다.
 
 예를 들어 i=1인 경우,                              
 수열의 첫번째 값과, 두번째 값으로 이루어진 배열의 부분수열을 찾는다.
 이때 첫번째원소(j=0)와 두번째 원소(i=1)의 값을 비교해 만약 첫번째 원소가 작아서, 
 둘을 나란히 세울때 오름차순이 된다면 
 dp[i]값을 2로 초기화한다. (이는 i위치까지 이루어진 부분수열로 만들수 있는  LIS의 길이는 2라는 뜻이다)
 
 만약 i=4인 경우 ,
 첫번째 i=0 부터 i=4까지 총 5개의 배열로 만들수 있는 최장증가 부분수열의 길이를 구한다
 구한 길이를 dp[i]에 초기화한다. 또한 만들 수 있을때에는 dp[i보다 작은 j값]에 +1을 하여 dp[i]값을 초기화하는데,
 만약에 이미 dp[i]값이 더 크면 초기화하면 안되기 때문에 max를 이용한다.
  = 
 
